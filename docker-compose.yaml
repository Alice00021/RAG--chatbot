services:
  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - microservices-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_container
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
  rag:
    build:
      context: ./RAG
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - HF_HOME=/app/.cache
      - TOKENIZERS_PARALLELISM=false
      - CHROMA_DB_PATH=/app/chroma_db
    volumes:
      - rag-data:/app/chroma_db
      - ./RAG/knowledge_base:/app/knowledge_base:ro
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s


  llm:
    build:
      context: ./LLM
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  api-gateway:
    build:
      context: ./APIgateway
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - RAG_SERVICE_URL=http://rag:8000
      - LLM_SERVICE_URL=http://llm:8001
    depends_on:
      rag:
        condition: service_healthy
      llm:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  telegram:
    build:
      context: ./telegram_bot
      dockerfile: Dockerfile
    env_file:
    - ./telegram_bot/.env
    depends_on:
      api-gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "ps", "aux"] 
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  rag-data:
  pgdata:
    driver: local
  rabbitmq-data:
    driver: local

networks:
  microservices-network:
    driver: bridge
